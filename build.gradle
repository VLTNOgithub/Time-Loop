subprojects {
	task openBuildDir {
		doLast {
			def buildDir = file("${layout.buildDirectory.get().asFile.absolutePath}/libs").absolutePath
			if (System.properties['os.name'].toString().toLowerCase().contains('windows')) {
				def command = ['explorer', buildDir]
				new ProcessBuilder(command).start()
			} else {
				println "Skipping openBuildDir task as it is not running on Windows."
			}
		}
	}

	apply plugin: "java"
	java.toolchain.languageVersion = JavaLanguageVersion.of(java_version)
	
	base {
		archivesName = "${mod_jar_name}-${project.name.toUpperCase()}-${minecraft_version}"
	}

	processResources {
		var replaceProperties =
			[
				"mod_id": mod_id,
				"mod_version": mod_version,
				"mod_name": mod_name,
				"mod_description": mod_description,
				"mod_author_1": mod_author_1,
				"mod_author_2": mod_author_2,
				"mod_homepage": mod_homepage,
				"mod_source": mod_source,
				"mod_issues": mod_issues,
				"mod_license": mod_license,
				"mod_mocap_version": mod_mocap_version,

				"mod_group": mod_group,
				"mod_jar_name": mod_jar_name,
				
				"minecraft_version"         : minecraft_version,
				"java_version"              : java_version,
				"version_range_fabric"      : version_range_fabric,
				"version_range_neoforge"    : version_range_neoforge,
				"fabric_loader_version"     : fabric_loader_version,
				"fabric_api_version"        : fabric_api_version,
				"neoforge_version"          : neoforge_version,
			]

		filesMatching(["pack.mcmeta", "fabric.mod.json", "META-INF/mods.toml", "META-INF/neoforge.mods.toml", "*.mixins.json"]) {
			expand replaceProperties
		}
		inputs.properties replaceProperties
	}

	jar {
		exclude "assets/time-loop/icon.psd"
		finalizedBy openBuildDir
	}
	
	tasks.withType(JavaCompile).configureEach { it.options.encoding = "UTF-8" }

	if (project.name != "common") {
		dependencies {
			compileOnly project(":common")
		}

		processResources { from project(":common").sourceSets.main.resources }
		tasks.named("compileJava", JavaCompile) { source project(":common").sourceSets.main.allSource }
	}
}